<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 22.3">

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;language_entries&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="  &lt;string-array name=&quot;language_entries&quot;>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/arrays.xml"
            line="4"
            column="17"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;language_values&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="  &lt;string-array name=&quot;language_values&quot;>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/arrays.xml"
            line="33"
            column="17"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;navigation_drawer_icons_light&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="  &lt;string-array name=&quot;navigation_drawer_icons_light&quot;>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/arrays.xml"
            line="124"
            column="17"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;navigation_drawer_icons_dark&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="  &lt;string-array name=&quot;navigation_drawer_icons_dark&quot;>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/arrays.xml"
            line="130"
            column="17"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_my&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_my&quot;>My&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_disable_storage_encryption&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_disable_storage_encryption&quot;>Disable storage encryption?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_warning_this_will_disable_storage_encryption_for_all_messages&quot; is not translated in ar, bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_warning_this_will_disable_storage_encryption_for_all_messages&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_disable&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_disable&quot;>Disable&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_unregistering&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_unregistering&quot;>Unregistering...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_unregistering_for_data_based_communication&quot; is not translated in ar, bg, bo, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_unregistering_for_data_based_communication&quot;>Unregistering for data based communication&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_disable_push_messages&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_disable_push_messages&quot;>Disable push messages?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_this_will_disable_push_messages&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_this_will_disable_push_messages&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_error_connecting_to_server&quot; is not translated in bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_error_connecting_to_server&quot;>Error connecting to server!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_you_are_not_registered_with_the_push_service&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pl, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_you_are_not_registered_with_the_push_service&quot;>You are not registered with the push service...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_updating_directory&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pl, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_updating_directory&quot;>Updating directory&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="33"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_updating_push_directory&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pl, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_updating_push_directory&quot;>Updating push directory...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="34"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_sms_enabled&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_sms_enabled&quot;>SMS Enabled&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="35"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_touch_to_change_your_default_sms_app&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_touch_to_change_your_default_sms_app&quot;>Touch to change your default SMS app&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="36"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_sms_disabled&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_sms_disabled&quot;>SMS Disabled&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ApplicationPreferencesActivity_touch_to_make_textsecure_your_default_sms_app&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ApplicationPreferencesActivity_touch_to_make_textsecure_your_default_sms_app&quot;>Touch to make TextSecure your default SMS app&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="38"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationItem_this_media_has_been_stored_in_an_encrypted_database_warning&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationItem_this_media_has_been_stored_in_an_encrypted_database_warning&quot;>This media has been stored in an encrypted database. The version you save to the SD card will no longer be encrypted. Would you like to continue?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="54"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationItem_this_media_has_been_stored_in_an_encrypted_database_external_viewer_warning&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationItem_this_media_has_been_stored_in_an_encrypted_database_external_viewer_warning&quot;>This media has been stored in an encrypted database. Unfortunately, to view it with an external content viewer currently requires the data to be temporarily decrypted and written to disk. Are you sure that you would like to do this?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="59"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationItem_received_key_exchange_message_click_to_process&quot; is not translated in ar, bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationItem_received_key_exchange_message_click_to_process&quot;>Received key exchange message, click to process.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="62"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationItem_received_plaintext_message_click_to_terminate&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk, sv"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationItem_received_plaintext_message_click_to_terminate&quot;>Received a plaintext SMS while you have a secure session open. If they don\&apos;t have a session open, messages you send will appear as garbled text. Click to terminate secure session.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="63"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationItem_group_action_left&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationItem_group_action_left&quot;>%1$s has left the group.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="64"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationItem_group_action_joined&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationItem_group_action_joined&quot;>%1$s have joined the group.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="65"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationItem_group_action_modify&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationItem_group_action_modify&quot;>%1$s has updated the group.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="66"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_abort_secure_session_confirmation&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_abort_secure_session_confirmation&quot;>End Secure Session Confirmation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="71"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_are_you_sure_that_you_want_to_abort_this_secure_session_question&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_are_you_sure_that_you_want_to_abort_this_secure_session_question&quot;>Are you sure that you want to end this secure session?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="72"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_select_contact_info&quot; is not translated in bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_select_contact_info&quot;>Select contact info&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="76"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_unnamed_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_unnamed_group&quot;>Unnamed Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="86"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_d_recipients_in_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_d_recipients_in_group&quot;>%d members&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="87"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_d_recipients_in_group_singular&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_d_recipients_in_group_singular&quot;>1 member&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="88"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_invalid_recipient&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_invalid_recipient&quot;>Invalid recipient!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="90"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_calls_not_supported&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_calls_not_supported&quot;>Calls Not Supported&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="91"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_this_device_does_not_appear_to_support_dial_actions&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_this_device_does_not_appear_to_support_dial_actions&quot;>This device does not appear to support dial actions.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="92"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_leave_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_leave_group&quot;>Leave group?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="93"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ConversationActivity_are_you_sure_you_want_to_leave_this_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ConversationActivity_are_you_sure_you_want_to_leave_this_group&quot;>Are you sure you want to leave this group?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="94"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_export_to_sd_card&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_export_to_sd_card&quot;>Export To SD Card?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="116"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_this_will_export_your_encrypted_keys_settings_and_messages&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_this_will_export_your_encrypted_keys_settings_and_messages&quot;>This"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="117"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_export&quot; is not translated in my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_export&quot;>Export&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="120"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_export_plaintext_to_sd_card&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_export_plaintext_to_sd_card&quot;>Export Plaintext To SD Card?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="121"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_warning_this_will_export_the_plaintext_contents&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_warning_this_will_export_the_plaintext_contents&quot;>Warning, this will"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="122"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_cancel&quot; is not translated in my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_cancel&quot;>Cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="125"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_exporting&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_exporting&quot;>Exporting&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="126"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_exporting_plaintext_to_sd_card&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_exporting_plaintext_to_sd_card&quot;>Exporting plaintext to SD card..."
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="127"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_error_unable_to_write_to_sd_card&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_error_unable_to_write_to_sd_card&quot;>Error, unable to write to SD"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="129"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_error_while_writing_to_sd_card&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_error_while_writing_to_sd_card&quot;>Error while writing to SD card."
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="132"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_success&quot; is not translated in my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_success&quot;>Success!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="134"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ExportFragment_exporting_keys_settings_and_messages&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ExportFragment_exporting_keys_settings_and_messages&quot;>Exporting encrypted keys,"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="135"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_actionbar_title&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_actionbar_title&quot;>New Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="140"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_actionbar_update_title&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_actionbar_update_title&quot;>Update Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="141"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_group_name_hint&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_group_name_hint&quot;>Group Name&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="142"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_actionbar_mms_title&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_actionbar_mms_title&quot;>New MMS Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="143"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_contacts_dont_support_push&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_contacts_dont_support_push&quot;>You have selected a contact that doesn\&apos;t support TextSecure groups, so this group will be MMS.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="144"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_you_dont_support_push&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_you_dont_support_push&quot;>You\&apos;re not registered for using the data channel, so TextSecure groups are disabled.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="145"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_you_dont_own_this_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_you_dont_own_this_group&quot;>You\&apos;re not the owner of this group, so you cannot edit the title or picture.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="146"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_contacts_mms_exception&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_contacts_mms_exception&quot;>An unexpected error happened that has made group creation fail.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="147"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_contacts_no_members&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_contacts_no_members&quot;>You need at least one person in your group!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="148"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_contacts_invalid_number&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_contacts_invalid_number&quot;>One of the members of your group has a number that can\&apos;t be read correctly. Please fix or remove that contact and try again.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="149"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_file_io_exception&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk, sv"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_file_io_exception&quot;>File I/O error, couldn\&apos;t create a temporary image file.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="150"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_avatar_content_description&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk, sv"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_avatar_content_description&quot;>Group Avatar&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="151"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_menu_create_title&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_menu_create_title&quot;>Create Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="152"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;GroupCreateActivity_creating_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;GroupCreateActivity_creating_group&quot;>Creating %1$s&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="153"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_import_system_sms_database&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_import_system_sms_database&quot;>Import System SMS Database?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="156"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_this_will_import_messages_from_the_system&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_this_will_import_messages_from_the_system&quot;>This will import"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="157"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_import&quot; is not translated in my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_import&quot;>Import&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="161"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_cancel&quot; is not translated in my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_cancel&quot;>Cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="162"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_restore_encrypted_backup&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_restore_encrypted_backup&quot;>Restore Encrypted Backup?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="163"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_restoring_an_encrypted_backup_will_completely_replace_your_existing_keys&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_restoring_an_encrypted_backup_will_completely_replace_your_existing_keys&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="164"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_restore&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_restore&quot;>Restore&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="169"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_import_plaintext_backup&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_import_plaintext_backup&quot;>Import Plaintext Backup?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="170"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_this_will_import_messages_from_a_plaintext_backup&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_this_will_import_messages_from_a_plaintext_backup&quot;>This will import"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="171"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_importing&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_importing&quot;>Importing&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="175"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_import_plaintext_backup_elipse&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_import_plaintext_backup_elipse&quot;>Import plaintext backup...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="176"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_no_plaintext_backup_found&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_no_plaintext_backup_found&quot;>No plaintext backup found!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="177"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_error_importing_backup&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_error_importing_backup&quot;>Error importing backup!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="178"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_import_complete&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_import_complete&quot;>Import complete!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="179"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_restoring&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_restoring&quot;>Restoring&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="180"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_restoring_encrypted_backup&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_restoring_encrypted_backup&quot;>Restoring encrypted backup...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="181"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_no_encrypted_backup_found&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_no_encrypted_backup_found&quot;>No encrypted backup found!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="182"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ImportFragment_restore_complete&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ImportFragment_restore_complete&quot;>Restore complete!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="183"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;MmsDownloader_no_connectivity_available_for_mms_download_try_again_later&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;MmsDownloader_no_connectivity_available_for_mms_download_try_again_later&quot;>No connectivity available for MMS download, try again later...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="189"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;MmsDownloader_error_connecting_to_mms_provider&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;MmsDownloader_error_connecting_to_mms_provider&quot;>Error connecting to MMS provider...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="191"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;MmsDownloader_error_reading_mms_settings&quot; is not translated in bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;MmsDownloader_error_reading_mms_settings&quot;>Error reading wireless provider MMS settings...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="192"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;NotificationMmsMessageRecord_multimedia_message&quot; is not translated in my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;NotificationMmsMessageRecord_multimedia_message&quot;>Multimedia Message&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="195"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;PromptMmsActivity_you_must_specify_an_mmsc_url_for_your_carrier&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;PromptMmsActivity_you_must_specify_an_mmsc_url_for_your_carrier&quot;>You must specify an MMSC URL for your carrier.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="209"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;PromptMmsActivity_mms_settings_updated&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;PromptMmsActivity_mms_settings_updated&quot;>MMS Settings Updated&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="210"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ReceiveKeyActivity_the_signature_on_this_key_exchange_is_different&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ReceiveKeyActivity_the_signature_on_this_key_exchange_is_different&quot;>The"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="214"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ReceiveKeyActivity_you_may_wish_to_verify_this_contact&quot; is not translated in bo, cs, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ReceiveKeyActivity_you_may_wish_to_verify_this_contact&quot;>You may wish to verify"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="219"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ReceiveKeyActivity_the_signature_on_this_key_exchange_is_trusted_but&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ReceiveKeyActivity_the_signature_on_this_key_exchange_is_trusted_but&quot;>The"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="222"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ReceiveKeyActivity_processing&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ReceiveKeyActivity_processing&quot;>Processing&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="226"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ReceiveKeyActivity_processing_key_exchange&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ReceiveKeyActivity_processing_key_exchange&quot;>Processing key exchange…&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="227"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_connect_with_textsecure&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_connect_with_textsecure&quot;>Connect With TextSecure&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="230"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_select_your_country&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_select_your_country&quot;>Select Your Country&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="231"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_you_must_specify_your_country_code&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_you_must_specify_your_country_code&quot;>You must specify your"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="232"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_you_must_specify_your_phone_number&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_you_must_specify_your_phone_number&quot;>You must specify your"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="235"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_invalid_number&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_invalid_number&quot;>Invalid number&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="238"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_the_number_you_specified_s_is_invalid&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_the_number_you_specified_s_is_invalid&quot;>The number you"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="239"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_unsupported&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_unsupported&quot;>Unsupported&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="242"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_sorry_this_device_is_not_supported_for_data_messaging&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_sorry_this_device_is_not_supported_for_data_messaging&quot;>Sorry,"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="243"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_we_will_now_verify_that_the_following_number_is_associated_with_your_device_s&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_we_will_now_verify_that_the_following_number_is_associated_with_your_device_s&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="248"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationActivity_edit&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationActivity_edit&quot;>Edit&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="253"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProblemsActivity_possible_problems&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProblemsActivity_possible_problems&quot;>Possible Problems&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="256"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_verifying_number&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_verifying_number&quot;>Verifying number&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="259"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_edit_s&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_edit_s&quot;>Edit %s&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="260"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_registration_complete&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_registration_complete&quot;>Registration complete!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="261"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_possible_problems&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_possible_problems&quot;>Possible problems.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="262"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_you_must_enter_the_code_you_received_first&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_you_must_enter_the_code_you_received_first&quot;>You must enter the code you received first...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="263"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_connecting&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_connecting&quot;>Connecting&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="264"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_connecting_for_verification&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_connecting_for_verification&quot;>Connecting for verification...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="265"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_network_error&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_network_error&quot;>Network Error!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="266"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_unable_to_connect&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_unable_to_connect&quot;>Unable to connect. Please check your network connection and try again.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="267"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_verification_failed&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_verification_failed&quot;>Verification Failed!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="268"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_the_verification_code_you_submitted_is_incorrect&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_the_verification_code_you_submitted_is_incorrect&quot;>The verification code you submitted is incorrect. Please try again.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="269"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_too_many_attempts&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_too_many_attempts&quot;>Too many attempts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="270"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_youve_submitted_an_incorrect_verification_code_too_many_times&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_youve_submitted_an_incorrect_verification_code_too_many_times&quot;>You\&apos;ve submitted an incorrect verification code too many times. Please wait a minute before trying again.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="271"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_requesting_call&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_requesting_call&quot;>Requesting Call&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="272"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_requesting_incoming_call&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_requesting_incoming_call&quot;>Requesting incoming verification call...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="273"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_server_error&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_server_error&quot;>Server Error&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="274"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_the_server_encountered_an_error&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_the_server_encountered_an_error&quot;>The server encountered an error. Please try again.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="275"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_too_many_requests&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_too_many_requests&quot;>Too Many Requests!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="276"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_youve_already_requested_a_voice_call&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_youve_already_requested_a_voice_call&quot;>You\&apos;ve already recently requested a voice call. You can request another in 20 minutes.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="277"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_verifying_voice_code&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_verifying_voice_code&quot;>Verifying voice code...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="278"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_registration_conflict&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_registration_conflict&quot;>Registration conflict&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="279"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationProgressActivity_this_number_is_already_registered_on_a_different&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationProgressActivity_this_number_is_already_registered_on_a_different&quot;>This number is already registered on a different TextSecure server (CyanogenMod?). You must unregistering there before registering here.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="280"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationService_registration_complete&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationService_registration_complete&quot;>Registration Complete&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="283"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationService_textsecure_registration_has_successfully_completed&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationService_textsecure_registration_has_successfully_completed&quot;>TextSecure registration has successfully completed.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="284"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationService_registration_error&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationService_registration_error&quot;>Registration Error&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="285"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;RegistrationService_textsecure_registration_has_encountered_a_problem&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;RegistrationService_textsecure_registration_has_encountered_a_problem&quot;>TextSecure registration has encountered a problem.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="286"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SmsMessageRecord_received_corrupted_key_exchange_message&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SmsMessageRecord_received_corrupted_key_exchange_message&quot;>Received corrupted key"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="289"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SmsMessageRecord_received_key_exchange_message_for_invalid_protocol_version&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SmsMessageRecord_received_key_exchange_message_for_invalid_protocol_version&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="292"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SmsMessageRecord_received_message_with_unknown_identity_key_click_to_process&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SmsMessageRecord_received_message_with_unknown_identity_key_click_to_process&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="295"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SmsMessageRecord_received_updated_but_unknown_identity_information&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk, sv"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SmsMessageRecord_received_updated_but_unknown_identity_information&quot;>Received updated but unknown identity information. Tap to validate identity.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="298"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SmsMessageRecord_secure_session_ended&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SmsMessageRecord_secure_session_ended&quot;>Secure session ended.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="299"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ThreadRecord_left_the_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ThreadRecord_left_the_group&quot;>Left the group...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="302"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;TheadRecord_secure_session_ended&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;TheadRecord_secure_session_ended&quot;>Secure session ended.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="303"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewIdentityActivity_identity_fingerprint&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewIdentityActivity_identity_fingerprint&quot;>Identity Fingerprint&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="333"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewIdentityActivity_my_identity_fingerprint&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewIdentityActivity_my_identity_fingerprint&quot;>My Identity Fingerprint&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="334"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;KeyExchangeInitiator_initiate_despite_existing_request_question&quot; is not translated in cs"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;KeyExchangeInitiator_initiate_despite_existing_request_question&quot;>Initiate Despite Existing Request?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="337"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;MmsDatabase_mms_pending_download&quot; is not translated in ar, bg, bo, da, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;MmsDatabase_mms_pending_download&quot;>Tap and configure MMS settings to continue download.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="351"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;MmsSender_currently_unable_to_send_your_mms_message&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;MmsSender_currently_unable_to_send_your_mms_message&quot;>Currently unable to send your MMS message.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="359"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;KeyCachingService_textsecure_passphrase_cached&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;KeyCachingService_textsecure_passphrase_cached&quot;>Touch to open.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="366"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;KeyCachingService_textsecure_passphrase_cached_with_lock&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;KeyCachingService_textsecure_passphrase_cached_with_lock&quot;>Touch to open, or touch the lock to close.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="367"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;KeyCachingService_passphrase_cached&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;KeyCachingService_passphrase_cached&quot;>TextSecure is unlocked&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="368"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;KeyCachingService_lock&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;KeyCachingService_lock&quot;>Lock with passphrase&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="369"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;MessageNotifier_mark_all_as_read&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;MessageNotifier_mark_all_as_read&quot;>Mark all as read&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="379"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;MessageNotifier_mark_as_read&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;MessageNotifier_mark_as_read&quot;>Mark as read&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="380"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewLocalIdentityActivity_regenerating&quot; is not translated in bg, bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewLocalIdentityActivity_regenerating&quot;>Regenerating...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="383"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewLocalIdentityActivity_regenerating_identity_key&quot; is not translated in bg, bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewLocalIdentityActivity_regenerating_identity_key&quot;>Regenerating identity"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="384"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewLocalIdentityActivity_regenerated&quot; is not translated in bg, bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewLocalIdentityActivity_regenerated&quot;>Regenerated!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="387"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewLocalIdentityActivity_reset_identity_key&quot; is not translated in bg, bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewLocalIdentityActivity_reset_identity_key&quot;>Reset Identity Key?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="388"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewLocalIdentityActivity_by_regenerating_your_identity_key_your_existing_contacts_will_receive_warnings&quot; is not translated in ar, bg, bo, it, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewLocalIdentityActivity_by_regenerating_your_identity_key_your_existing_contacts_will_receive_warnings&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="389"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;ViewLocalIdentityActivity_cancel&quot; is not translated in bg, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;ViewLocalIdentityActivity_cancel&quot;>Cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="394"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;QuickResponseService_sorry_quick_response_is_not_yet_supported_by_textsecure&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;QuickResponseService_sorry_quick_response_is_not_yet_supported_by_textsecure&quot;>Sorry, Quick Response is not yet supported by TextSecure!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="401"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;contact_selection_group_activity__finding_contacts&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;contact_selection_group_activity__finding_contacts&quot;>Finding contacts&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="415"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;single_contact_selection_group_activity__filter&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;single_contact_selection_group_activity__filter&quot;>Type a name to filter&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="418"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SingleContactSelectionActivity_you_are_not_registered_with_the_push_service&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SingleContactSelectionActivity_you_are_not_registered_with_the_push_service&quot;>You are not registered with the push service...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="419"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SingleContactSelectionActivity_updating_directory&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SingleContactSelectionActivity_updating_directory&quot;>Updating directory&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="420"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;SingleContactSelectionActivity_updating_push_directory&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;SingleContactSelectionActivity_updating_push_directory&quot;>Updating push directory...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="421"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_activity__type_message&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_activity__type_message&quot;>&lt;small>Send a message&lt;/small>&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="430"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;country_selection_fragment__loading_countries&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;country_selection_fragment__loading_countries&quot;>Loading countries...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="446"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;create_passphrase_activity__please_choose_a_passphrase_that_will_be_used_to_locally_encrypt_your_data_this_should_be_a_strong_passphrase&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pl, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;create_passphrase_activity__please_choose_a_passphrase_that_will_be_used_to_locally_encrypt_your_data_this_should_be_a_strong_passphrase&quot;>Please choose a passphrase if you would like to locally encrypt your data.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="450"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;create_passphrase_activity__generating_secrets&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;create_passphrase_activity__generating_secrets&quot;>GENERATING SECRETS&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="454"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;create_passphrase_activity__skip&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;create_passphrase_activity__skip&quot;>Skip&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="455"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;create_passphrase_activity__create&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;create_passphrase_activity__create&quot;>Create&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="456"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__confirmation&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__confirmation&quot;>This log will be posted publicly online for TextSecure contributors to view. Feel free to examine or edit the logs below before hitting submit.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="460"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__button_cancel&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__button_cancel&quot;>Don\&apos;t submit&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="461"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__button_ok&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__button_ok&quot;>Submit&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="462"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__log_fetch_failed&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__log_fetch_failed&quot;>Could not grab logs from your device. You can still use ADB to get debug logs instead.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="463"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__log_submit_success_title&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__log_submit_success_title&quot;>Success!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="464"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__log_got_it&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__log_got_it&quot;>Got it&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="465"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__your_pastebin_url&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__your_pastebin_url&quot;>Please copy this URL and add it to your issue (long press to put in clipboard):\n\n&lt;b>%1$s&lt;/b>&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="466"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__copied_to_clipboard&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__copied_to_clipboard&quot;>Copied to clipboard&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="467"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__loading_logcat&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__loading_logcat&quot;>Loading logcat&amp;#8230;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="468"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;log_submit_activity__thanks&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;log_submit_activity__thanks&quot;>Thanks for your help!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="469"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;database_upgrade_activity__updating_database&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;database_upgrade_activity__updating_database&quot;>Updating Database...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="480"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;export_fragment__export_encrypted_backup&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;export_fragment__export_encrypted_backup&quot;>Export Encrypted Backup&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="482"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;export_fragment__export_an_encrypted_backup_to_the_sd_card&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;export_fragment__export_an_encrypted_backup_to_the_sd_card&quot;>Export an encrypted"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="483"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;export_fragment__export_plaintext_backup&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;export_fragment__export_plaintext_backup&quot;>Export Plaintext Backup&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="486"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;export_fragment__export_a_plaintext_backup_compatible_with&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;export_fragment__export_a_plaintext_backup_compatible_with&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="487"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;import_fragment__import_system_sms_database&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;import_fragment__import_system_sms_database&quot;>Import System SMS Database&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="489"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;import_fragment__import_the_database_from_the_default_system&quot; is not translated in ar, bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;import_fragment__import_the_database_from_the_default_system&quot;>Import the database"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="490"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;import_fragment__import_encrypted_backup&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;import_fragment__import_encrypted_backup&quot;>Import Encrypted Backup&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="493"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;import_fragment__restore_a_previously_exported_encrypted_textsecure_backup&quot; is not translated in ar, bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;import_fragment__restore_a_previously_exported_encrypted_textsecure_backup&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="494"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;import_fragment__import_plaintext_backup&quot; is not translated in bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;import_fragment__import_plaintext_backup&quot;>Import Plaintext Backup&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="497"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;import_fragment__import_a_plaintext_backup_file&quot; is not translated in ar, bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;import_fragment__import_a_plaintext_backup_file&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="498"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;local_identity__regenerate_key&quot; is not translated in bg, bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;local_identity__regenerate_key&quot;>Regenerate Key&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="501"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;mms_preferences_activity__manual_mms_settings_are_required&quot; is not translated in ar, bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;mms_preferences_activity__manual_mms_settings_are_required&quot;>Manual MMS settings are required for your phone.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="504"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;prompt_mms_activity__textsecure_requires_mms_settings_to_deliver_media_and_group_messages&quot; is not translated in ar, bg, bo, da, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_mms_activity__textsecure_requires_mms_settings_to_deliver_media_and_group_messages&quot;>TextSecure requires MMS settings to deliver media and group messages through your wireless carrier. Your device does not make this information available, which is occasionally true for locked devices and other restrictive configurations.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="511"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;prompt_mms_activity__to_send_media_and_group_messages_click_ok&quot; is not translated in ar, bg, bo, da, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_mms_activity__to_send_media_and_group_messages_click_ok&quot;>To send media and group messages, click \&apos;OK\&apos; and complete the requested settings. The MMS settings for your carrier can generally be located by searching for \&apos;your carrier APN\&apos;. You will only need to do this once.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="512"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;prompt_mms_activity__mmsc_url_required&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_mms_activity__mmsc_url_required&quot;>MMSC URL (REQUIRED):&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="513"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;prompt_mms_activity__mms_proxy_host_optional&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_mms_activity__mms_proxy_host_optional&quot;>MMS PROXY HOST (OPTIONAL):&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="514"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;prompt_mms_activity__mms_proxy_port_optional&quot; is not translated in sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prompt_mms_activity__mms_proxy_port_optional&quot;>MMS PROXY PORT (OPTIONAL):&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="515"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;receive_key_activity__complete&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;receive_key_activity__complete&quot;>Complete&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="518"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_activity__textsecure_can_use_instant_messages_to_avoid_sms_charges_when_communicating_with_other_textsecure_users&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_activity__textsecure_can_use_instant_messages_to_avoid_sms_charges_when_communicating_with_other_textsecure_users&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="521"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_activity__your_country&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_activity__your_country&quot;>YOUR COUNTRY&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="525"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_activity__your_country_code_and_phone_number&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_activity__your_country_code_and_phone_number&quot;>YOUR COUNTRY CODE AND"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="526"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_activity__phone_number&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_activity__phone_number&quot;>PHONE NUMBER&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="529"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_activity__register&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_activity__register&quot;>Register&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="530"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_activity__registration_will_transmit_some_contact_information_to_the_server_temporariliy&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_activity__registration_will_transmit_some_contact_information_to_the_server_temporariliy&quot;>Registration will transmit some contact information to the server temporarily.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="531"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_activity__skip&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_activity__skip&quot;>Skip&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="532"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_problems__some_possible_problems_include&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_problems__some_possible_problems_include&quot;>Some possible problems"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="535"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_problems__sms_interceptors&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_problems__sms_interceptors&quot;>SMS Interceptors.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="538"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_problems__some_third_party_text_messaging_clients_such_as_handcent&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_problems__some_third_party_text_messaging_clients_such_as_handcent&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="539"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_problems__incorrect_number&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_problems__incorrect_number&quot;>Incorrect number.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="545"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_problems__please_checkt_to_make_sure_you_entered_your_number_correctly&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_problems__please_checkt_to_make_sure_you_entered_your_number_correctly&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="546"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_problems__google_voice&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_problems__google_voice&quot;>Google Voice.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="550"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_problems__textsecure_will_not_work_with_google_voice_numbers&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_problems__textsecure_will_not_work_with_google_voice_numbers&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="551"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__voice_verification&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__voice_verification&quot;>Voice Verification&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="556"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__textsecure_can_also_call_you_to_verify_your_number&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__textsecure_can_also_call_you_to_verify_your_number&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="557"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__verify&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__verify&quot;>Verify&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="561"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__call_me&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__call_me&quot;>Call Me&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="562"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__edit_number&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__edit_number&quot;>Edit number&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="563"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__connectivity_error&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__connectivity_error&quot;>Connectivity error.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="564"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__textsecure_was_unable_to_connect_to_the_push_service&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__textsecure_was_unable_to_connect_to_the_push_service&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="565"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__some_possible_problems_include&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__some_possible_problems_include&quot;>Some possible"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="568"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__no_network_connectivity&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__no_network_connectivity&quot;>No network"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="571"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__your_device_needs_network_connectivity&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__your_device_needs_network_connectivity&quot;>Your"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="574"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__restrictive_firewall&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__restrictive_firewall&quot;>Restrictive firewall."
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="578"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__if_you_are_connected_via_wifi_its_possible_that_there_is_a_firewall&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__if_you_are_connected_via_wifi_its_possible_that_there_is_a_firewall&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="580"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__textsecure_will_now_automatically_verify_your_number_with_a_confirmation_sms_message&quot; is not translated in ar, bg, bo, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__textsecure_will_now_automatically_verify_your_number_with_a_confirmation_sms_message&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="584"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__connecting&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__connecting&quot;>Connecting...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="587"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__waiting_for_sms_verification&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__waiting_for_sms_verification&quot;>Waiting for SMS"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="588"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__registering_with_server&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__registering_with_server&quot;>Registering with server...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="591"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__this_couild_take_a_moment_please_be_patient&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__this_couild_take_a_moment_please_be_patient&quot;>This"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="592"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__textsecure_timed_out_while_waiting_for_a_verification_sms_message&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__textsecure_timed_out_while_waiting_for_a_verification_sms_message&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="595"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__sms_verification_failed&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__sms_verification_failed&quot;>SMS verification"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="598"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;registration_progress_activity__generating_keys&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;registration_progress_activity__generating_keys&quot;>Generating keys...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="601"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;recipients_panel__add_member&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;recipients_panel__add_member&quot;>Add member&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="605"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;AndroidManifest__select_contact&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;AndroidManifest__select_contact&quot;>Select Contact&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="629"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;AndroidManifest__log_submit&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;AndroidManifest__log_submit&quot;>Submit Debug Logs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="637"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;arrays__import_export&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;arrays__import_export&quot;>Import / Export&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="640"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;arrays__my_identity_key&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;arrays__my_identity_key&quot;>My Identity Key&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="641"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;arrays__contact_keys&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;arrays__contact_keys&quot;>Contact Keys&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="642"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__general&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__general&quot;>General&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="645"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__enable_enter_key_title&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__enable_enter_key_title&quot;>Enable Enter key&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="650"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__replace_smiley_with_enter_key&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__replace_smiley_with_enter_key&quot;>Replace the smiley key with an enter key&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="651"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__change_passphrase&quot; is not translated in my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__change_passphrase&quot;>Change passphrase&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="657"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__complete_key_exchanges&quot; is not translated in my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__complete_key_exchanges&quot;>Complete key exchanges&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="659"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__disable_passphrase&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__disable_passphrase&quot;>Disable passphrase&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="660"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__disable_local_encryption_of_messages_and_keys&quot; is not translated in ar, bo, it, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__disable_local_encryption_of_messages_and_keys&quot;>Disable local encryption of messages and keys&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="661"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__screen_security&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__screen_security&quot;>Screen security&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="662"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__disable_screen_security_to_allow_screen_shots&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__disable_screen_security_to_allow_screen_shots&quot;>Disable screen security to allow screen shots&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="664"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__identity_key_settings&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__identity_key_settings&quot;>Identity keys&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="670"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__manage_identity_keys&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__manage_identity_keys&quot;>Manage identity keys&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="672"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__led_color&quot; is not translated in ar, bg, bo, da, ja, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__led_color&quot;>LED color&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="676"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__pref_led_blink_title&quot; is not translated in ar, bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__pref_led_blink_title&quot;>LED blink pattern&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="677"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__pref_led_blink_custom_pattern_title&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__pref_led_blink_custom_pattern_title&quot;>Set custom LED Blink Pattern&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="678"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__pref_led_blink_custom_pattern_on_for&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__pref_led_blink_custom_pattern_on_for&quot;>On For:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="679"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__pref_led_blink_custom_pattern_off_for&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__pref_led_blink_custom_pattern_off_for&quot;>Off For:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="680"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__pref_led_blink_custom_pattern_set&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__pref_led_blink_custom_pattern_set&quot;>Custom LED blink pattern set!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="681"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__sound&quot; is not translated in bg, bo, ja, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__sound&quot;>Sound&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="682"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__change_notification_sound&quot; is not translated in ar, bg, bo, da, he, ja, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__change_notification_sound&quot;>Change notification sound&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="683"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__inthread_notifications&quot; is not translated in bg, bo, da, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__inthread_notifications&quot;>In-thread notifications&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="684"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__play_inthread_notifications&quot; is not translated in bg, bo, da, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__play_inthread_notifications&quot;>Play notification sound when viewing an active conversation.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="685"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__white&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__white&quot;>White&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="696"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__advanced&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__advanced&quot;>Advanced&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="701"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__passphrase&quot; is not translated in my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__passphrase&quot;>Passphrase&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="702"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__advanced_mms_access_point_names&quot; is not translated in ar, bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__advanced_mms_access_point_names&quot;>MMS Preferences&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="703"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__enable_manual_mms&quot; is not translated in ar, bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__enable_manual_mms&quot;>Enable Manual MMS&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="704"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__override_system_mms_settings&quot; is not translated in ar, bg, bo, da, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__override_system_mms_settings&quot;>Override system MMS settings with the information below.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="705"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__light_theme&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__light_theme&quot;>Light Theme&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="717"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__dark_theme&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__dark_theme&quot;>Dark Theme&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="718"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__appearance&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__appearance&quot;>Appearance&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="719"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__theme&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__theme&quot;>Theme&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="720"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__default&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__default&quot;>Default&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="721"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__language&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__language&quot;>Language&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="722"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__make_default_sms_app&quot; is not translated in ar, bg, bo, da, he, ja, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__make_default_sms_app&quot;>Set as default SMS app&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="723"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__make_textsecure_the_default_sms_mms_app&quot; is not translated in ar, bg, bo, da, he, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__make_textsecure_the_default_sms_mms_app&quot;>Make TextSecure the default SMS/MMS application for your system.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="724"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__use_data_channel&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__use_data_channel&quot;>Push messages&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="725"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__use_the_data_channel_for_communication_with_other_textsecure_users&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__use_the_data_channel_for_communication_with_other_textsecure_users&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="726"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__allow_sms_fallback&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk, sv"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__allow_sms_fallback&quot;>SMS Fallback&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="729"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__allow_sms_fallback_disabled_reason&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__allow_sms_fallback_disabled_reason&quot;>TextSecure is currently your default SMS app. Please set another default SMS app first to change this preference.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="730"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__send_and_receive_sms_messages_when_push_is_not_available&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__send_and_receive_sms_messages_when_push_is_not_available&quot;>Send and receive SMS messages when push is not available&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="731"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__refresh_push_directory&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pl, pt, ru, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__refresh_push_directory&quot;>Refresh Push Directory&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="732"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;preferences__submit_debug_log&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;preferences__submit_debug_log&quot;>Submit debug log&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="733"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;push_directory__menu_refresh&quot; is not translated in ar, bg, bo, cs, da, de, el, es, fr, he, it, ja, kn-rIN, my, nl, no, pl, pt, pt-rBR, ro, ru, sk, sl, sv, zh-rCN"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;push_directory__menu_refresh&quot;>Refresh Contact List&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="747"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_context__menu_resend_message&quot; is not translated in bg, bo, da, ja, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_context__menu_resend_message&quot;>Resend message&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="760"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_list__drawer_open&quot; is not translated in ar, bg, bo, da, el, he, it, ja, kn-rIN, my, pt, sk, sv"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_list__drawer_open&quot;>Open navigation drawer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="771"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_list__drawer_close&quot; is not translated in ar, bg, bo, da, el, he, it, ja, kn-rIN, my, pt, sk, sv"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_list__drawer_close&quot;>Close navigation drawer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="772"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_secure_verified__menu_no_identity&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_secure_verified__menu_no_identity&quot;>No Identity Available&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="776"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_secure_verified__menu_abort_secure_session&quot; is not translated in ar, bg, bo, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_secure_verified__menu_abort_secure_session&quot;>End Secure Session&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="778"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation__menu_update_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation__menu_update_group&quot;>Update Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="782"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation__menu_leave_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation__menu_leave_group&quot;>Leave Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="783"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation__menu_add_contact_info&quot; is not translated in ar, bg, bo, da, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation__menu_add_contact_info&quot;>Add contact info&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="784"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_group_options__delivery&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_group_options__delivery&quot;>Delivery&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="789"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_group_options__conversation&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_group_options__conversation&quot;>Conversation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="790"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;conversation_group_options__broadcast&quot; is not translated in bo, my, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;conversation_group_options__broadcast&quot;>Broadcast&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="791"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;text_secure_normal__menu_new_group&quot; is not translated in ar, bg, bo, cs, da, el, he, it, ja, kn-rIN, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;text_secure_normal__menu_new_group&quot;>New Group&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="803"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;text_secure_normal__menu_clear_passphrase&quot; is not translated in ar, bg, bo, cs, da, he, it, ja, my, pt, sk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;text_secure_normal__menu_clear_passphrase&quot;>Lock&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="805"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;text_secure_normal__mark_all_as_read&quot; is not translated in bo, my"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;text_secure_normal__mark_all_as_read&quot;>Mark All Read&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/travis/build/AlexanderS/TextSecure/res/values/strings.xml"
            line="806"
            column="13"/>
    </issue>

</issues>
